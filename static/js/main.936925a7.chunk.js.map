{"version":3,"sources":["components/Header.js","utils/api.js","components/InfoContainer.js","utils/timeUtils.js","components/InfoCard.js","utils/aqiInformation.js","components/AqiChecker.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","axios","create","baseURL","responseType","InfoContainer","props","aqi","AQI","category","Category","dateObserved","DateObserved","hourObserved","HourObserved","reportingArea","ReportingArea","stateCode","StateCode","isLoading","zipCodeEntered","noDataAvailable","name","Name","number","Number","Information","convertedTime","hour","timeValue","hours","convertTime","style","fontSize","DataReading","type","height","width","Paper","elevation","InfoCard","aqiLevel","valuesOfIndex","description","styles","backgroundColor","color","textAlign","display","alignItems","justifyContent","flipDirection","flipOnHover","aqiInformation","AqiChecker","state","zipCode","handleInputChange","bind","getAqiData","this","setState","get","params","format","distance","api_key","process","headers","response","data","mostRecentData","length","prevState","Object","assign","console","log","e","target","value","TextField","id","label","variant","onChange","Button","marginTop","onClick","map","info","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yMAYeA,G,kBATA,WACX,OACI,yBAAKC,UAAU,UACX,oC,mGCJGC,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,qDACTC,aAAc,S,0BCkFHC,G,OAhFO,SAAAC,GAAS,IAGlBC,EASLD,EATAE,IACUC,EAQVH,EARAI,SACcC,EAOdL,EAPAM,aACcC,EAMdP,EANAQ,aACeC,EAKfT,EALAU,cACWC,EAIXX,EAJAY,UACAC,EAGAb,EAHAa,UACAC,EAEAd,EAFAc,eACAC,EACAf,EADAe,gBAXuB,EAcYZ,GAAY,GAArCa,EAda,EAcnBC,KAAoBC,EAdD,EAcPC,OAEdC,EAAc,WAChB,GAAIL,EACA,OACI,6BACI,mEACA,qGAKZ,IAAMM,EChCa,SAAAC,GACvB,IACIC,EADEC,EAAQL,OAAOG,GAcrB,OAXIE,EAAQ,EACRD,EAAW,GAAKC,EACTA,EAAQ,GACfD,EAAW,IAAMC,EAAQ,IACT,GAATA,IACPD,EAAW,MAGfA,GAAa,SACbA,GAAcC,GAAS,GAAM,QAAU,QDmBbC,CAAYlB,GAElC,OACI,6BACI,yDAA+BE,EAA/B,KAAgDE,EAAhD,OACA,4BAAKV,GACL,0BAAMP,UAAU,YAAYgC,MAAO,CAACC,SAAU,SAA9C,MACQtB,EADR,OAC0BgB,GAE1B,iEAAuCH,EAAvC,KAAiDF,EAAjD,yDAKNY,EAAc,SAAA5B,GAAU,IAClBc,EAAmBd,EAAnBc,eACR,OACI,yBAAKpB,UAAU,YAENoB,EAA4D,kBAACM,EAAD,MAA3C,iEAOlC,OACE,yBAAK1B,UAAU,kBACVmB,EAAY,kBAAC,IAAD,CACTgB,KAAK,OACLC,OAAQ,IACRC,MAAO,MAEX,kBAACC,EAAA,EAAD,CAAOtC,UAAU,QAAQuC,UAAW,IAC/B,kBAACL,EAAD,CAAcd,eAAgBA,Q,iBE/B9BoB,EAhCE,SAAClC,GAAW,IACjBmC,EAAgDnC,EAAhDmC,SAAUC,EAAsCpC,EAAtCoC,cAAeC,EAAuBrC,EAAvBqC,YAC3BC,EAAS,CACXC,gBAFoDvC,EAAVwC,MAG1CC,UAAW,SACXC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAGtB,OACQ,kBAAC,IAAD,CACIC,cAAc,aACdC,aAAa,EACbpB,MAAO,CAAEK,MAAO,QAASD,OAAQ,UAEjC,kBAAC,YAAD,CACIJ,MAAOY,GAEP,6BACI,4BAAKH,GACL,4BAAKC,KAGb,kBAAC,WAAD,CACIV,MAAOY,GACP,2BAAG,2BAAID,OCUVU,EAvCQ,CACnB,CACIZ,SAAU,OACVC,cAAe,UACfC,YAAa,0EACbG,MAAO,WAEX,CACIL,SAAU,WACVC,cAAe,YACfC,YAAa,4IACbG,MAAO,WAEX,CACIL,SAAU,iCACVC,cAAe,aACfC,YAAa,+GACbG,MAAO,WAEX,CACIL,SAAU,YACVC,cAAe,aACfC,YAAa,4IACbG,MAAO,WAEX,CACIL,SAAU,iBACVC,cAAe,aACfC,YAAa,sEACbG,MAAO,WAEX,CACIL,SAAU,YACVC,cAAe,iBACfC,YAAa,kFACbG,MAAO,YCxBFQ,G,OAAb,kDACI,WAAYhD,GAAQ,IAAD,8BACf,cAAMA,IAEDiD,MAAQ,CACTC,QAAS,KACTrC,WAAW,EACXC,gBAAgB,EAChBC,iBAAiB,GAGrB,EAAKoC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAXH,EADvB,gGAeqBF,GAfrB,2FAiBYI,KAAKC,SAAS,CAAE1C,WAAW,IAjBvC,SAkBmClB,EAAM6D,IApBpB,kCAoBsC,CAC3CC,OAAQ,CACJP,QAASA,EACTQ,OAAQ,mBACRC,SAAU,KACVC,QA1BJC,wCA4BAC,QAAS,CACL,mBAAoB,oBA1BxC,OAkBkBC,EAlBlB,OA8BoBC,EAASD,EAATC,KACFC,EAAiBD,EAAK,GAER,IAAhBA,EAAKE,OACLZ,KAAKC,SAAS,CAAExC,iBAAiB,IAEjCuC,KAAKC,UAAS,SAAAY,GAAS,OAAIC,OAAOC,OAAOF,EAAWF,MAExDX,KAAKC,SAAS,CACV1C,WAAW,EACXC,gBAAgB,IAxChC,kDA2CYwD,QAAQC,IAAR,cA3CZ,yJA+CsBC,GACdlB,KAAKC,SAAS,CACVL,QAASsB,EAAEC,OAAOC,UAjD9B,+BAqDc,IAAD,OACC1E,EAAK,eAAOsD,KAAKL,OACvB,OACI,yBAAKvD,UAAU,eACX,kBAAC,EAAkBM,GACnB,yBAAKN,UAAU,eACX,kBAACiF,EAAA,EAAD,CACIC,GAAG,iBACHC,MAAM,WACNC,QAAQ,WACRC,SAAU,SAAAP,GAAC,OAAI,EAAKrB,kBAAkBqB,MAE1C,kBAACQ,EAAA,EAAD,CACItD,MAAO,CAACuD,UAAW,QACnBH,QAAQ,WACRtC,MAAM,UACN0C,QAAS,kBAAM,EAAK7B,WAAW,EAAKJ,MAAMC,WAJ9C,aASJ,yBAAKxD,UAAU,cACVqD,EAAeoC,KAAI,SAAAC,GAChB,OACQ,kBAAC,EAAaA,YA7E9C,GAAgCC,IAAMC,YCGvBC,MATf,WACE,OACE,yBAAK7F,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGY8F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.936925a7.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/header.css';\n\nconst Header = () => {\n    return (\n        <div className=\"header\">\n            <header>\n            </header>\n        </div>\n    )\n}\n\nexport default Header;","import axios from \"axios\";\n\nexport default axios.create({\n    baseURL: \"https://cors-anywhere.herokuapp.com/airnowapi.org/\",\n    responseType: \"json\"\n});","import React from 'react';\nimport { Paper } from '@material-ui/core';\nimport Loader from 'react-loader-spinner'\nimport '../styles/info-container.css';\nimport {convertTime} from \"../utils/timeUtils\";\n\nconst InfoContainer = props => {\n    //todo, how to get rid of wrong casing from the start?\n    const {\n        AQI: aqi,\n        Category: category,\n        DateObserved: dateObserved,\n        HourObserved: hourObserved,\n        ReportingArea: reportingArea,\n        StateCode: stateCode,\n        isLoading,\n        zipCodeEntered,\n        noDataAvailable,\n    } = props;\n\n    const { Name: name, Number: number } = category || {}; // default to empty object until data comes in\n\n    const Information = () => {\n        if (noDataAvailable) {\n            return (\n                <div>\n                    <h2>No data available for your ZIP code</h2>\n                    <h3>Please try again with a different ZIP code close by in the same area</h3>\n                </div>\n            )\n        }\n\n        const convertedTime = convertTime(hourObserved);\n\n        return (\n            <div>\n                <h2>The air quality index for {reportingArea}, {stateCode} is</h2>\n                <h1>{aqi}</h1>\n                <span className=\"date-time\" style={{fontSize: \"12px\"}}>\n                    On {dateObserved} at {convertedTime}\n                </span>\n                <p>This reading classifies as a level {number} ({name}). Hover over the cards below for more information.</p>\n            </div>\n        )\n    }\n\n    const DataReading = props => {\n        const { zipCodeEntered } = props;\n        return (\n            <div className=\"contents\">\n                {\n                    !zipCodeEntered ? <h2>Enter a ZIP code to get started</h2> : <Information />\n                }\n            </div>\n\n        )\n    }\n\n    return (\n      <div className=\"info-container\">\n          {isLoading ? <Loader\n              type=\"Oval\"\n              height={200}\n              width={200}\n              /> :\n          <Paper className=\"paper\" elevation={10}>\n               <DataReading  zipCodeEntered={zipCodeEntered}/>\n          </Paper>}\n      </div>\n  )\n};\n\n// AQI: 71\n// Category:\n//     Name: \"Moderate\"\n//     Number: 2\n// __proto__: Object\n// DateObserved: \"2020-09-28 \"\n// HourObserved: 16\n// Latitude: 37.55\n// LocalTimeZone: \"PST\"\n// Longitude: -122.03\n// ParameterName: \"O3\"\n// ReportingArea: \"Fremont\"\n// StateCode: \"CA\"\n\nexport default InfoContainer;","export const convertTime = hour => {\n    const hours = Number(hour);\n    let timeValue;\n\n    if (hours > 0) {\n        timeValue= \"\" + hours;\n    } else if (hours > 12) {\n        timeValue= \"\" + (hours - 12);\n    } else if (hours == 0) {\n        timeValue= \"12\";\n    }\n\n    timeValue += ':00:00'\n    timeValue += (hours >= 12) ? \" P.M.\" : \" A.M.\";\n\n    return timeValue;\n}","import React from \"react\";\nimport Flippy, { FrontSide, BackSide } from \"react-flippy\";\n\nconst InfoCard = (props) => {\n    const { aqiLevel, valuesOfIndex, description, color } = props;\n    const styles = {\n        backgroundColor: color,\n        textAlign: \"center\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    };\n\n  return (\n          <Flippy\n              flipDirection=\"horizontal\"\n              flipOnHover={true} // default false\n              style={{ width: '150px', height: '200px' }}\n          >\n              <FrontSide\n                  style={styles}\n              >\n                  <div>\n                      <h2>{aqiLevel}</h2>\n                      <h3>{valuesOfIndex}</h3>\n                  </div>\n              </FrontSide>\n              <BackSide\n                  style={styles}>\n                  <b><p>{description}</p></b>\n              </BackSide>\n          </Flippy>\n  )\n};\n\nexport default InfoCard;","const aqiInformation = [\n    {\n        aqiLevel: \"Good\",\n        valuesOfIndex: \"0 to 50\",\n        description: \"Air quality is satisfactory, and air pollution poses little or no risk.\",\n        color: \"#0F921E\"\n    },\n    {\n        aqiLevel: \"Moderate\",\n        valuesOfIndex: \"51 to 100\",\n        description: \"Air quality is acceptable. However, there may be a risk for some people, particularly those who are unusually sensitive to air pollution.\",\n        color: \"#FBFD00\"\n    },\n    {\n        aqiLevel: \"Unhealthy for Sensitive groups\",\n        valuesOfIndex: \"101 to 150\",\n        description: \"Members of sensitive groups may experience health effects. The general public is less likely to be affected.\",\n        color: \"#ea8825\"\n    },\n    {\n        aqiLevel: \"Unhealthy\",\n        valuesOfIndex: \"151 to 200\",\n        description: \"Some members of the general public may experience health effects; members of sensitive groups may experience more serious health effects.\",\n        color: \"#FF1A00\"\n    },\n    {\n        aqiLevel: \"Very Unhealthy\",\n        valuesOfIndex: \"201 to 300\",\n        description: \"Health alert: The risk of health effects is increased for everyone.\",\n        color: \"#c846d0\"\n    },\n    {\n        aqiLevel: \"Hazardous\",\n        valuesOfIndex: \"301 and higher\",\n        description: \"Health warning of emergency conditions: everyone is more likely to be affected.\",\n        color: \"#901600\"\n    },\n];\n\nexport default aqiInformation;","import React from 'react';\nimport { Input, TextField, Button, withStyles } from '@material-ui/core';\nimport axios from '../utils/api';\nimport InfoContainer from \"./InfoContainer\";\nimport InfoCard from \"./InfoCard\";\nimport aqiInformation from \"../utils/aqiInformation\";\nimport '../styles/aqi-checker.scss';\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst API_BASE_URL = '/aq/observation/zipCode/current';\n\nexport class AqiChecker extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            zipCode: null,\n            isLoading: false,\n            zipCodeEntered: false,\n            noDataAvailable: false,\n        }\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.getAqiData = this.getAqiData.bind(this);\n    }\n\n    async getAqiData(zipCode) {\n        try {\n            this.setState({ isLoading: true });\n            const response = await axios.get(API_BASE_URL, {\n                params: {\n                    zipCode: zipCode,\n                    format: \"application/json\",\n                    distance: \"10\",\n                    api_key: API_KEY\n                },\n                headers: {\n                    'X-Requested-With': 'XMLHttpRequest'\n                }\n            });\n\n            const { data } = response;\n            const mostRecentData = data[0];\n\n            if (data.length === 0) {\n                this.setState({ noDataAvailable: true });\n            } else {\n                this.setState(prevState => Object.assign(prevState, mostRecentData));\n            }\n            this.setState({\n                isLoading: false,\n                zipCodeEntered: true,\n            })\n        } catch(e) {\n            console.log(`error`, e);\n        }\n    }\n\n    handleInputChange(e) {\n        this.setState({\n            zipCode: e.target.value\n        })\n    }\n\n    render() {\n        const props = {...this.state};\n        return (\n            <div className=\"aqi-checker\">\n                <InfoContainer {...props} />\n                <div className=\"data-inputs\">\n                    <TextField\n                        id=\"zip-code-field\"\n                        label=\"ZIP Code\"\n                        variant=\"outlined\"\n                        onChange={e => this.handleInputChange(e)}\n                    />\n                    <Button\n                        style={{marginTop: \"10px\"}}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        onClick={() => this.getAqiData(this.state.zipCode)}\n                    >\n                        Get Data\n                    </Button>\n                </div>\n                <div className=\"info-cards\">\n                    {aqiInformation.map(info => {\n                        return (\n                                <InfoCard {...info} />\n                        )\n                    })}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport { AqiChecker } from \"./components/AqiChecker\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header />\n        <AqiChecker />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}